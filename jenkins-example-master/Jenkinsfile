pipeline {
    agent any
    
    environment {
        APP_NAME = 'myapp'
        NODE_VERSION = '14.17.0'
        DOCKER_REGISTRY = 'my-registry.com'
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                sh 'npm install'
                sh 'npm run build'
                sh 'npm test'
            }
        }
        
        stage('Build and Push Docker Image') {
            when {
                branch 'master'
            }
            environment {
                DOCKER_IMAGE_TAG = "latest"
            }
            steps {
                script {
                    docker.build("${DOCKER_REGISTRY}/${APP_NAME}:${DOCKER_IMAGE_TAG}")
                    docker.withRegistry("${DOCKER_REGISTRY}", "docker-registry-credentials") {
                        dockerImage.push()
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            when {
                branch 'master'
            }
            environment {
                KUBECONFIG = credentials('kubeconfig')
            }
            steps {
                sh 'kubectl apply -f kubernetes.yaml'
            }
        }
        
        stage('Cleanup') {
            steps {
                sh 'npm run cleanup'
            }
        }
    }
}
