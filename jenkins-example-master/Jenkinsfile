pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = "my-docker-registry.com"
        APP_NAME = "my-app"
        APP_VERSION = "1.0.0"
        K8S_NAMESPACE = "my-namespace"
        K8S_DEPLOYMENT_NAME = "my-app-deployment"
        K8S_CONTAINER_NAME = "my-app-container"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build and Test') {
            steps {
                sh 'npm install'
                sh 'npm run test'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", "docker-registry-credentials") {
                        def dockerImage = docker.build("${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION}", ".")
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    kubernetesDeploy(
                        kubeconfigId: "my-kubeconfig",
                        configs: 'kubernetes/*.yaml',
                        enableConfigSubstitution: true,
                        namespace: "${K8S_NAMESPACE}",
                        deployment: "${K8S_DEPLOYMENT_NAME}",
                        container: "${K8S_CONTAINER_NAME}",
                        imagePullSecrets: ['my-registry-secret']
                    )
                }
            }
        }
        stage('Cleanup') {
            steps {
                sh 'npm run cleanup'
            }
        }
    }
}
